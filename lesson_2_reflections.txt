What happens when you initialize a repository? Why do you need to do it?
- A .git file is created and the git is therefore initialised. If you command in $git status, you’ll see there are all the original files. This initial git repository needs to be committed, using either:
$ git add -A or $ git add individual_items_to_add
$ git commit -m “This is the first commit - generic message” 

How is the staging area different from the working directory and the repository? What value do you think it offers?
- the working directory is the state of the files at the very moment you’re working
g with them, whereas the staging area is the location the repository commits are added ready for committing. 

How can you use the staging area to make sure you have one commit per logical change?
- By using git status and checking which changes have been forwarded into the staging area, prior to a commit command, we can ensure that we are doing one logical change per commit. 

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
- It would be handy when required to make multiple versions of an app or coding repository, for example different languages, different versions, or even perhaps when you want to progress forward with a major change and commit it, but not totally overwrite the master branch as of yet.

How do the diagrams help you visualize the branch structure?
- The diagrams help in visualising that each branch is taken from the master branch at the point in time at which it was created. That branch then has the master branch as its parent, which can be merged later, but unless the branch is merged, it remains an entirely independent branch with whatever isolated changes you desire from the master branch. Each separate branch can be worked upon independently from the others, without any having any kind of impact on the others, unless a merging takes place. 

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
- The merge will combine new changes and additional content, along with removing anything intentional from the combination of both merged files. We represent it as a diagram, as the merge is a combination of both individual branches, including all their individual updates. When you git log a merged branch combination, all the commits from both separate branches will be visible. 

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
- Gits automatic merging is convenient and rapid for combining branches of code, which may not have changed drastically, and so the merging process is relatively straightforward and without risks. Manual merging is a necessity when doing complex merges, whereby similar files have both been updated differently between branches. In this situation git cannot distinguish between which is the correct code, and so the user must manually examine the conflicts and rectify them accordingly, which is both time consuming and demanding.