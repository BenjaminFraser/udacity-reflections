When would you want to use a remote repository rather than keeping all your work local?
-Keeping a remote repository rather than just a standalone local repository makes logical sense for a whole host of reasons, 
the main one being that in the event of corruptiong or loss of data of your local repository, you still retain a full copy
of all your hard earned work. Keeping a repository up to date remotely also allows collaboration easily with others, and 
presents much more opportunity to work well as a team, without issues of requiring access to the local repository. 

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
- If I was away in a remote location, with no access to the internet, and decided to use my spare time to work a little on a current web app project, then the problem with git automatically pulling changes to my computer is that I may pull old files that I actually changed whilst away. Another aspect is that the work done to the remote repository may have been done by another member of the team, and the work he/she carried out is not actually appropriate for the web app, and so you'd like to have the option of pulling this data, rather than it being forced unwillingly. 

Describe the differences between forks, clones, and branches. When would you use one instead of another?
- A fork is a clone done simple on GitHub or another remote repository; a fork doesn't involve copying code to your own machine. A clone is a copy of a repository to your own machine, using a url with the $ git clone Url command. A branch is a duplicate of your current code within a repository, which becomes unique in that you can update it further completely independently from the other branches in your repository. You do also have the choice to merge this split branch back into one of the others whenever you wish too, which becomes very handy for handling multiple projects or code updates at one time. 

What is the benefit of having a copy of the last known state of the remote stored locally?
- Having a copy of the last known state of the remote repository is convenient as it allows us to examine the recent changes (if any) and then combine it into our master if not already done so, or choose not to - if the code is not required or wanted from recent changes. 

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
- You could use cloud based services, such as dropbox, google docs or onedrive. You could also have a shared system on a local network, or email out a new version of a file each time its done. Although git and github may have a large learning curve, and can seem quite complicated at times, their superiority in effectiveness of sharing and working on code and projects is worth the time it takes. 

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
- If I was undertaking something completely different from the main code itself, like a new feature, different mode, or different kind of version, then separating out from the master is very convenient. It also means that more than one person can work on multiple things at once, without all modifying and potentially ruining each others code whilst experimenting. By then merging, pull-requesting and collaborating, the end result code is one which is verfified by all, and not just one, which makes it valuable when working within a team.